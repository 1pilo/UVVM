
Release Procedure for UVVM Utility Library (UL)
===============================================================================

NOTE: See script for release under internal_script\common\bin\git-release.pl
      Oops - that's not there!

Procedure:
Note: This is a manual procedure. An automated procedure may skip some steps.
---------------------------------------------------------------------
- All relevant files are assumed committed and pushed

- Ideally, clone new project to ensure clean repos
- Run regressions to check this version is good

- Extract GIT change history since previous release
  $ git lg <tag>...development
    - Assuming you want to release latest development
    - Assuming you have pretty log (https://confluence.bitvis.no/display/IT/Git#Git-Prettylog)
  - Process history to suit target audience
  - Remove potential internal-only comments
  - Determine new revision number (acc. to Revision procedure : http://semver.org/spec/v1.0.0.html)

- Make branch for release, using revision number
  $ git checkout -b release-<version> (e.g. release-1.3.15)
- Add revision changes to uvvm_util/CHANGES.txt

- Step up revision 
  -> src/license_open_pkg.vhd

- Enter revision number in CHANGES.txt   (e.g. v1.3.15)
- Update dependencies.txt to use release candidate tag (e.g. tag:v1.3.15-rc)
- Commit and tag as release candidate (e.g. v1.3.15-rc) 

- run 'dep archive' (should it be named <deliver-name>_<revision-number>?)

- Review complete delivery in release-folder
- Unpack in clean directory

- Regression tests  (may be build, simulate, synthesize, etc.) on copy
  (To assure release-folder is not corrupted after clean-up)

If ok:

- Update dependencies.txt to use version (remove '-rc', e.g. v1.3.15)
- Commit
- Merge branch back to master
  $ git checkout master
  $ git merge --no-ff <version branch>

- Tag with version (e.g. v1.3.15)

- re-run 'dep archive' 
- diff zip files to check that no changes have been introduced in the merge
- The last run is the actual release (with the right versions in versions.txt)

- Rename zip file to contain version number (could be done by dependencies.py?)

- Copy the zip-file to a release-overview_folder

- Merge back to development
  $ git checkout <version branch> 
  - Update dependencies.txt to use development
  - commit
  $ git checkout development
  $ git merge <version branch>


If a problem, bug, etc. is detected during the release procedure, then fix it,
check it in and repeat procedure from the start.
NO other changes are to be made - apart from entering fix in the change history
(and check in) if the fix belongs in the change history.
The version number is not to be stepped again.


Files to be included in this release are filtered by 'git archive' and .gitattributes.
=========================================================================================

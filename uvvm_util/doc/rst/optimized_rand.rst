.. _optimized_randomization:

##################################################################################################################################
Optimized Randomization
##################################################################################################################################
Using General Randomization can be somewhat inefficient when trying to randomize several sets of values, especially with large 
and small ranges. Since the values in the large ranges will be generated more times than the ones in the small ranges in a Uniform 
distribution, this will cause the simulation to run longer in order to cover all the valid bins.

.. note ::

    Before using Optimized Randomization, it is recommended to have a look at :ref:`func_cov_pkg_overview` to be familiar with the 
    basic concepts.

By using Optimized Randomization, random values can be generated by using only the uncovered bins, thus reducing simulation time. 
Once all the bins have been covered, random values are generated again using all the valid bins.

* The randomization seeds are initialized with the unique default name of the coverpoint.
* The ``rand()`` function does not need any parameters as it is constrained by the bins.

In the following examples all the bins have *min_hits=1*, meaning that after being sampled once they stop being selected for 
randomization (until all bins are covered).

.. code-block::

    -- Example 1: The loop will iterate 100 times to generate random values from the 100 different bins
    -- Randomization sequence example: 64,42,35,7,89,92,...
    my_coverpoint.add_bins(bin_range(1,100));
    while not(my_coverpoint.coverage_completed(BINS_AND_HITS)) loop
      my_addr := my_coverpoint.rand(VOID);
      wait for C_CLK_PERIOD;
      my_coverpoint.sample_coverage(my_addr);
    end loop;

    -- Example 2: The loop will iterate 4 times to generate random values from the 4 different bins. Only a single random 
    -- value from the range bin will be selected, same applies for the bin with multiple values.
    -- Randomization sequence example: 3,7,0,30
    my_coverpoint.add_bins(bin(0));
    my_coverpoint.add_bins(bin(3));
    my_coverpoint.add_bins(bin_range(5,10,1));
    my_coverpoint.add_bins(bin((20,30,40,50)));
    while not(my_coverpoint.coverage_completed(BINS_AND_HITS)) loop
      my_addr := my_coverpoint.rand(VOID);
      wait for C_CLK_PERIOD;
      my_coverpoint.sample_coverage(my_addr);
    end loop;

    -- Example 3: The loop will iterate 6 times to generate random values from the 3 different bins. When the rand() function 
    -- selects a transition bin, the next value selected by rand() will be the next transition value in the bin, and so on 
    -- until the all the values in the bin are generated.
    -- Randomization sequence example: 2,4,6,8,0,3
    my_coverpoint.add_bins(bin(0));
    my_coverpoint.add_bins(bin(3));
    my_coverpoint.add_bins(bin_transition((2,4,6,8)));
    while not(my_coverpoint.coverage_completed(BINS_AND_HITS)) loop
      my_addr := my_coverpoint.rand(VOID);
      wait for C_CLK_PERIOD;
      my_coverpoint.sample_coverage(my_addr);
    end loop;

    -- Example 4: After the 4 bin values are generated by the rand() function and sampled, any bin can be selected again for 
    -- generating random values.
    -- Randomization sequence example: 5,1,3,7,1,1,7,3,5,7
    my_coverpoint.add_bins(bin(1));
    my_coverpoint.add_bins(bin(3));
    my_coverpoint.add_bins(bin(5));
    my_coverpoint.add_bins(bin(7));
    for i in 1 to 10 loop
      my_addr := my_coverpoint.rand(VOID);
      wait for C_CLK_PERIOD;
      my_coverpoint.sample_coverage(my_addr);
    end loop;

.. caution::
    Ignore and illegal bins will never be selected for randomization. However, if an illegal or ignore bin contains overlapping 
    values with a valid bin, they might be generated as there is no check to avoid this.

**********************************************************************************************************************************
Randomization weights
**********************************************************************************************************************************
The parameter *rand_weight* in the ``add_bins()`` procedure specifies the relative number of times a bin will be selected during 
randomization. It is not applicable for ignore or illegal bins since they are never selected for randomization.

.. code-block::

    add_bins(bin, min_hits, rand_weight, [bin_name])

    my_coverpoint.add_bins(bin(0), 1, 1); -- Selected 10% of the time
    my_coverpoint.add_bins(bin(2), 1, 3); -- Selected 30% of the time
    my_coverpoint.add_bins(bin(4), 1, 6); -- Selected 60% of the time

If a randomization weight is not specified, the bin will have a default weight equal to the minimum coverage. Moreover, this weight 
will be reduced by 1 every time the bin is sampled, thus balancing the randomization of the bins in an "adaptive" way. When all the 
bins have been covered, their respective randomization weights will be reset to their default value equal to the minimum coverage 
and will not change.

.. code-block::

    add_bins(bin, min_hits, [bin_name])

    my_coverpoint.add_bins(bin(0), 10); -- Selected 50% of the time (rand_weight = min_hits = 10)
    my_coverpoint.add_bins(bin(2), 5);  -- Selected 25% of the time (rand_weight = min_hits = 5)
    my_coverpoint.add_bins(bin(4), 5);  -- Selected 25% of the time (rand_weight = min_hits = 5)
    my_coverpoint.sample_coverage(0);   -- bin(0) will now be selected 47% of the time (rand_weight = 9)
    my_coverpoint.sample_coverage(0);   -- bin(0) will now be selected 44% of the time (rand_weight = 8)
    my_coverpoint.sample_coverage(0);   -- bin(0) will now be selected 41% of the time (rand_weight = 7)

**********************************************************************************************************************************
Randomization using transitions
**********************************************************************************************************************************
The Optimized Randomization mechanism will always select random values among the bins. In the case of a transition bin, when it is 
selected for randomization, it will return each value of the bin in sequence until the complete transition is generated, this 
ensures that the complete sequence can be randomly generated. However, if we also want to generate random transitions which are 
not included in the transition bins, we can use a range bin:

.. code-block::

    -- The range bin will generate random values in the range [1:20]. Note that it has a min_hits value of 9 since the bin 
    -- values overlap with those of the transition bins, therefore if a transition bin is sampled, the range bin will also 
    -- be sampled.
    my_coverpoint.add_bins(bin_transition((1,5,10)), 1);
    my_coverpoint.add_bins(bin_transition((1,6,20)), 1);
    my_coverpoint.add_bins(bin_range(1,20,1), 9);

    while not(my_coverpoint.coverage_completed(BINS_AND_HITS)) loop
      my_addr := my_coverpoint.rand(VOID);
      wait for C_CLK_PERIOD;
      my_coverpoint.sample_coverage(my_addr);
    end loop;
